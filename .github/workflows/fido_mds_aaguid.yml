name: Daily Download and Process FIDO MDS AAGUID

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间午夜执行
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write

jobs:
  fetch-and-process-mds:
    runs-on: ubuntu-latest

    steps:
      # 检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3

      # 备份现有的 mds_aaguid.json（如果存在）
      - name: Backup existing mds_aaguid.json
        run: |
          if [ -f "mds_aaguid.json" ]; then
            mkdir -p backup
            mv mds_aaguid.json backup/mds_aaguid.json
            echo "Existing mds_aaguid.json has been moved to backup/mds_aaguid.json"
          else
            echo "No existing mds_aaguid.json found. Skipping backup."
          fi

      # 可选：确认备份是否成功
      - name: Verify Backup
        run: |
          if [ -f "backup/mds_aaguid.json" ]; then
            echo "Backup verified: backup/mds_aaguid.json exists."
          else
            echo "Backup failed: backup/mds_aaguid.json does not exist."
            exit 1
          fi

      # 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 安装必要的 Python 包
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # 运行 Python 脚本处理 MDS 数据
      - name: Fetch and Process MDS Data
        id: process_mds
        run: |
          python <<EOF
          import os
          import requests
          import base64
          import json

          # 下载 MDS Blob
          response = requests.get("https://mds.fidoalliance.org/")
          if response.status_code != 200:
              raise Exception(f"Failed to download MDS Blob: {response.status_code}")

          mds_jwt = response.content.decode('ascii')

          # 解析 JWT Payload
          jwt_payload = mds_jwt.split('.')[1]
          jwt_payload += '=' * (-len(jwt_payload) % 4)  # 修正 Base64 编码
          mds_bytes = base64.urlsafe_b64decode(jwt_payload)
          mds_data = json.loads(mds_bytes.decode('utf-8'))

          # 获取 MDS 版本和下次更新时间
          mds_number = mds_data.get('no', 'unknown')
          mds_next = mds_data.get('nextUpdate', 'unknown')

          # 提取包含 AAGUID 的 FIDO2 语句，并构建列表
          fido2_statements = [
              {
                  "name": entry['metadataStatement'].get('description', 'No Description'),
                  "aaguid": entry['aaguid']
              }
              for entry in mds_data.get('entries', [])
              if entry.get('aaguid') is not None and 'description' in entry.get('metadataStatement', {})
          ]
          
          # 提取的条目数
          extracted_entries = len(fido2_statements)
          print(f"Extracted AAGUID entries: {extracted_entries}")
          
          # 将结果写入 mds_aaguid.json
          with open('mds_aaguid.json', 'w') as output_file:
              json.dump(fido2_statements, output_file, indent=2)
          EOF

          # 设置 Commit 消息
          commit_msg = f"from MDS file version {mds_number}, next update expected {mds_next}."
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              env_file.write(f"COMMIT_MSG={commit_msg}\n")

      # 比对 AAGUID 并生成 new_mds_aaguid.json
      - name: Compare AAGUIDs and Generate New Entries
        run: |
          python <<EOF
          import json
          from datetime import datetime
          import os

          # 加载新的 AAGUID 数据
          with open('mds_aaguid.json', 'r') as f:
              new_data = json.load(f)

          # 加载备份的 AAGUID 数据
          backup_file = 'backup/mds_aaguid.json'
          if os.path.exists(backup_file):
              with open(backup_file, 'r') as f:
                  backup_data = json.load(f)
          else:
              backup_data = []

          # 创建集合用于快速查找
          backup_aaguid_set = set(entry['aaguid'] for entry in backup_data)

          # 找出新的 AAGUID 条目
          new_entries = [
              {
                  "aaguid": entry["aaguid"],
                  "name": entry["name"],
                  "added_at": datetime.utcnow().isoformat() + 'Z'
              }
              for entry in new_data
              if entry["aaguid"] not in backup_aaguid_set
          ]

          # 写入 new_mds_aaguid.json
          if new_entries:
              with open('new_mds_aaguid.json', 'w') as f:
                  json.dump(new_entries, f, indent=2)
              print(f"Found {len(new_entries)} new AAGUID entries.")
          else:
              with open('new_mds_aaguid.json', 'w') as f:
                  json.dump(new_entries, f, indent=2)
              print("No new AAGUID entries found.")
          EOF

      # 提交并推送更改
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add mds_aaguid.json new_mds_aaguid.json
          
          # 构建提交消息
          COMMIT_MESSAGE="bot: Updated mds_aaguid.json with ${{ steps.process_mds.outputs.extracted_entries }} entries on $(date -u +"%Y-%m-%dT%H:%M:%SZ"), ${{ env.COMMIT_MSG }}"
          
          git commit -m "$COMMIT_MESSAGE" -a || echo "No changes to commit"
          
          # 使用 GITHUB_TOKEN 进行身份验证
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          
          git push
