name: Daily Download and Process AAGUIDs

# 设置所需权限，允许写入仓库内容
permissions:
  contents: write

on:
  schedule:
    - cron: '0 1 * * *' # 每天 UTC 时间 01:00 执行
  workflow_dispatch: # 允许手动触发

jobs:
  fetch-aaguid:
    runs-on: ubuntu-latest

    steps:
      # 检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true # 确保使用 GITHUB_TOKEN 进行身份验证

      # 备份现有的 passkey_aaguid.json（如果存在）
      - name: Backup existing passkey_aaguid.json
        run: |
          if [ -f "passkey_aaguid.json" ]; then
            mkdir -p backup
            mv passkey_aaguid.json backup/passkey_aaguid.json
            echo "Existing passkey_aaguid.json has been moved to backup/passkey_aaguid.json"
          else
            echo "No existing passkey_aaguid.json found. Skipping backup."
          fi

      # 可选：确认备份是否成功
      - name: Verify Backup
        run: |
          if [ -f "backup/passkey_aaguid.json" ]; then
            echo "Backup verified: backup/passkey_aaguid.json exists."
          else
            echo "Backup failed: backup/passkey_aaguid.json does not exist."
            exit 1
          fi
          
      # 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x' # 使用最新的 Python 3 版本

      # 安装必要的 Python 包
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # 获取并处理 AAGUIDs
      - name: Fetch and Process AAGUIDs
        id: process_aaguid
        run: |
          python <<EOF
          import os
          import requests
          import json

          # 远程 aaguid.json 文件的 URL
          url = "https://raw.githubusercontent.com/passkeydeveloper/passkey-authenticator-aaguids/main/aaguid.json"

          # 下载 JSON 数据
          response = requests.get(url)
          if response.status_code != 200:
              raise Exception(f"Failed to download aaguid.json: {response.status_code}")

          aaguid_data = response.json()

          # 总条目数
          total_entries = len(aaguid_data)
          print(f"Total entries in aaguid.json: {total_entries}")

          # 转换格式：提取每个条目的名称和 AAGUID
          passkey_aaguid_list = []
          for aaguid, details in aaguid_data.items():
              name = details.get("name", "").strip()
              passkey_aaguid_list.append({
                  "name": name,
                  "aaguid": aaguid
              })
              print(f"Processed AAGUID: {aaguid}, Name: '{name}'")

          # 提取的条目数
          extracted_entries = len(passkey_aaguid_list)
          print(f"Extracted AAGUID entries: {extracted_entries}")

          # 将结果写入 passkey_aaguid.json，完全覆盖原文件
          with open('passkey_aaguid.json', 'w') as outfile:
              json.dump(passkey_aaguid_list, outfile, indent=2)

          # 设置提交消息
          commit_msg = f"Updated passkey_aaguid.json with {extracted_entries} entries."
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"commit_msg={commit_msg}\n")
          EOF

      # 比对并生成 new_passkey_aaguid.json
      - name: Identify New AAGUIDs
        run: |
          python <<EOF
          import json
          import os
          from datetime import datetime

          # 加载新的 passkey_aaguid.json
          with open('passkey_aaguid.json', 'r') as f:
              current_data = json.load(f)
          current_aaguids = set(item['aaguid'] for item in current_data)

          # 尝试加载备份的 passkey_aaguid.json
          backup_aaguids = set()
          if os.path.exists('backup/passkey_aaguid.json'):
              with open('backup/passkey_aaguid.json', 'r') as f:
                  backup_data = json.load(f)
              backup_aaguids = set(item['aaguid'] for item in backup_data)

          # 识别新的 AAGUID 条目
          new_entries = [item for item in current_data if item['aaguid'] not in backup_aaguids]

          # 获取当前 UTC 时间
          current_time = datetime.utcnow().isoformat() + 'Z'  # ISO 8601 格式

          # 为每个新条目添加写入时间
          for entry in new_entries:
              entry['write_time'] = current_time

          # 将新的 AAGUID 条目写入 new_passkey_aaguid.json
          with open('new_passkey_aaguid.json', 'w') as f:
              json.dump(new_entries, f, indent=2)

          print(f"Identified {len(new_entries)} new AAGUID entries and wrote to new_passkey_aaguid.json.")
          EOF

      # 提交并推送更改
      - name: Commit and Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # 添加生成的文件
          git add passkey_aaguid.json new_passkey_aaguid.json
          # 提交更改
          git commit -m "bot: ${{ steps.process_aaguid.outputs.commit_msg }}" -a || echo "No changes to commit"
          # 使用 GITHUB_TOKEN 进行身份验证
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          # 推送到当前分支
          git push origin
